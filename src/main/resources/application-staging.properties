# Staging Configuration - Testing environment with full AWS integration
# This profile simulates production environment for testing purposes

# AWS Configuration
spring.cloud.aws.region.static=${AWS_REGION:mx-central-1}
spring.cloud.aws.credentials.use-default-aws-credentials-chain=true

# Secrets Manager Configuration
spring.cloud.aws.secrets.enabled=${USE_AWS_SECRETS:true}
spring.cloud.aws.secrets.name=${AWS_SECRETS_NAME:umc-sp-contents-secrets-staging}
spring.cloud.aws.secrets.fail-fast=false

# Parameter Store Configuration
spring.cloud.aws.paramstore.enabled=${USE_AWS_PARAMETERS:true}
spring.cloud.aws.paramstore.prefix=${AWS_PARAMETER_PREFIX:/umc-sp-contents/staging}
spring.cloud.aws.paramstore.fail-fast=false

# Database Configuration - Using Parameter Store values with fallbacks
# Fixed database name from stagingdb-contents to stagingdb_contents to match actual DB
spring.datasource.url=${/umc-sp-contents/staging/database/url:${DB_URL}}
spring.datasource.username=${/umc-sp-contents/staging/database/username:${DB_USERNAME}}
spring.datasource.password=${/umc-sp-contents/staging/database/password:${DB_PASSWORD}}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=umc_sp

# Staging Logging - More verbose than production, less than development
logging.level.org.springframework.web=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB:INFO}
logging.level.com.umc.sp.contents=${LOGGING_LEVEL_COM_UMC_SP_CONTENTS:DEBUG}
logging.level.org.flywaydb=${LOGGING_LEVEL_FLYWAY:INFO}
logging.level.org.springframework.cloud.aws=${LOGGING_LEVEL_AWS:DEBUG}
logging.level.software.amazon.awssdk=${LOGGING_LEVEL_AWS_SDK:INFO}

# Server Configuration
server.port=${SERVER_PORT:8082}
server.address=0.0.0.0

# Flyway Configuration for Staging
spring.flyway.enabled=${SPRING_FLYWAY_ENABLED:true}
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.default-schema=umc_sp
spring.flyway.schemas=umc_sp
spring.flyway.create-schemas=false

# Actuator Configuration for Staging
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true
management.health.ping.enabled=true
management.health.diskspace.enabled=true
management.metrics.export.prometheus.enabled=true

# DevTools disabled in staging
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# JMX disabled for performance
spring.jmx.enabled=false

# Content URLs for Staging - Direct S3 bucket access
content.resource.videos.url=${CONTENT_RESOURCE_VIDEOS_URL:https://d2j8po7lvypbe5.cloudfront.net/content/videos/%s/}
content.assets.videos.url=${CONTENT_ASSETS_VIDEOS_URL:https://d2j8po7lvypbe5.cloudfront.net/assets/videos/%s/images/}
content.assets.series.url=${CONTENT_ASSETS_SERIES_URL:https://d2j8po7lvypbe5.cloudfront.net/assets/series/%s/images/}
content.assets.experts.url=${CONTENT_ASSETS_EXPERTS_URL:https://d2j8po7lvypbe5.cloudfront.net/assets/experts/%s/images/}

# Swagger Configuration for Staging
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true

# HikariCP Configuration for Staging
# Similar to production but with debugging options
spring.datasource.hikari.pool-name=UMC-Contents-Staging-Pool
spring.datasource.hikari.minimum-idle=${HIKARI_MIN_IDLE:8}
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAX_POOL_SIZE:15}
# CRITICAL: Enable auto-commit to prevent transaction blocking issues
spring.datasource.hikari.auto-commit=${HIKARI_AUTO_COMMIT:true}
spring.datasource.hikari.connection-timeout=${HIKARI_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${HIKARI_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFETIME:1800000}
spring.datasource.hikari.connection-test-query=${HIKARI_TEST_QUERY:SELECT 1}
spring.datasource.hikari.leak-detection-threshold=${HIKARI_LEAK_THRESHOLD:60000}
spring.datasource.hikari.register-mbeans=true

# Security Configuration - OAuth2 Resource Server with AWS Cognito
# CRITICAL: Security must be enabled in staging to match production behavior
umc.security.enabled=true

# AWS Cognito Configuration for Staging
# NOTE: Cognito is in us-east-1 (not available in mx-central-1)
# These values can be overridden via Parameter Store or environment variables
spring.security.oauth2.resourceserver.jwt.issuer-uri=${/umc-sp-contents/staging/cognito/issuer-uri:https://cognito-idp.us-east-1.amazonaws.com/us-east-1_UTuZF3RMs}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${/umc-sp-contents/staging/cognito/jwk-set-uri:https://cognito-idp.us-east-1.amazonaws.com/us-east-1_UTuZF3RMs/.well-known/jwks.json}

# JWT Configuration - Audience is the Cognito App Client ID
spring.security.oauth2.resourceserver.jwt.audiences=${/umc-sp-contents/staging/jwt/audiences:7ur2jk2dqfh8l31ositr33occq}

# Security Development Mode - DISABLED in staging
umc.security.development-mode=false

# CORS Configuration for Staging
# More restrictive than development but allows testing
umc.cors.allowed-origins=${/umc-sp-contents/staging/cors/allowed-origins:*}
umc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
umc.cors.allowed-headers=*
umc.cors.allow-credentials=true
umc.cors.max-age=3600

