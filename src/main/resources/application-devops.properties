# DevOps Configuration - Optimized for containerized deployment and CI/CD
# This profile is designed for Docker containers, Kubernetes, and CI/CD pipelines
# It supports multiple target environments through environment variables

# AWS Configuration - Flexible for different deployment targets
# IMPORTANT: This controls the region for AWS SDK services (S3, Secrets Manager, Parameter Store)
# Cognito uses its own region specified in the issuer-uri
spring.cloud.aws.region.static=${AWS_REGION:}
spring.cloud.aws.credentials.use-default-aws-credentials-chain=${USE_AWS_DEFAULT_CREDENTIALS:true}
spring.cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID:}
spring.cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY:}

# Secrets Manager Configuration - Environment-driven
spring.cloud.aws.secrets.enabled=${USE_AWS_SECRETS:false}
spring.cloud.aws.secrets.name=${AWS_SECRETS_NAME:umc-sp-contents-secrets-devops}
spring.cloud.aws.secrets.fail-fast=${AWS_SECRETS_FAIL_FAST:false}

# Parameter Store Configuration - Environment-driven
spring.cloud.aws.paramstore.enabled=${USE_AWS_PARAMETERS:false}
spring.cloud.aws.paramstore.prefix=${AWS_PARAMETER_PREFIX:/umc-sp-contents/devops}
spring.cloud.aws.paramstore.fail-fast=${AWS_PARAMETERS_FAIL_FAST:false}

# Database Configuration - Environment-driven
spring.datasource.url=${DATABASE_URL:}
spring.datasource.username=${DATABASE_USERNAME:}
spring.datasource.password=${DATABASE_PASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=umc_sp

# Flyway Configuration
spring.flyway.enabled=${SPRING_FLYWAY_ENABLED:true}
spring.flyway.default-schema=umc_sp
spring.flyway.schemas=umc_sp
spring.flyway.create-schemas=${SPRING_FLYWAY_CREATE_SCHEMAS:true}

# Server Configuration
server.port=${SERVER_PORT:8082}
server.address=0.0.0.0

# Logging Configuration for Docker
logging.level.org.springframework.web=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB:INFO}
logging.level.com.umc.sp.contents=${LOGGING_LEVEL_COM_UMC_SP_CONTENTS:INFO}
logging.level.org.springframework.cloud.aws=${LOGGING_LEVEL_AWS:INFO}
logging.level.software.amazon.awssdk=${LOGGING_LEVEL_AWS_SDK:WARN}
logging.level.org.flywaydb=${LOGGING_LEVEL_FLYWAY:INFO}

# Container optimizations
spring.jmx.enabled=false
spring.main.lazy-initialization=false

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true
management.health.ping.enabled=true
management.health.diskspace.enabled=true
management.metrics.export.prometheus.enabled=true

# DevTools disabled in container
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# Content URLs for DevOps - Environment-driven with AWS support
# Supports both Secrets Manager and Parameter Store
content.resource.videos.url=${content-resource-videos-url:${CONTENT_RESOURCE_VIDEOS_URL:https://d2j8po7lvypbe5.cloudfront.net/content/videos/%s/}}
content.assets.videos.url=${content-assets-videos-url:${CONTENT_ASSETS_VIDEOS_URL:https://d2j8po7lvypbe5.cloudfront.net/assets/videos/%s/images/}}
content.assets.series.url=${content-assets-series-url:${CONTENT_ASSETS_SERIES_URL:https://d2j8po7lvypbe5.cloudfront.net/assets/series/%s/images/}}
content.assets.experts.url=${content-assets-experts-url:${CONTENT_ASSETS_EXPERTS_URL:https://d2j8po7lvypbe5.cloudfront.net/assets/experts/%s/images/}}

# Swagger Configuration for DevOps
springdoc.api-docs.path=${SPRINGDOC_API_DOCS_PATH:/v3/api-docs}
springdoc.swagger-ui.path=${SPRINGDOC_SWAGGER_UI_PATH:/swagger-ui.html}
springdoc.swagger-ui.enabled=${SPRINGDOC_SWAGGER_UI_ENABLED:true}

# HikariCP Configuration for DevOps/Kubernetes
# Optimized for containerized environments with high availability
spring.datasource.hikari.pool-name=${HIKARI_POOL_NAME:UMC-Contents-K8s-Pool}
# Connection pool sizing - can be overridden via env vars or Parameter Store
spring.datasource.hikari.minimum-idle=${HIKARI_MIN_IDLE:${/umc-sp-contents/devops/hikari/minimum-idle:10}}
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAX_POOL_SIZE:${/umc-sp-contents/devops/hikari/maximum-pool-size:20}}
# CRITICAL: Enable auto-commit to prevent transaction blocking issues
spring.datasource.hikari.auto-commit=${HIKARI_AUTO_COMMIT:true}
# Connection timeouts
spring.datasource.hikari.connection-timeout=${HIKARI_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${HIKARI_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFETIME:1800000}
# Connection validation
spring.datasource.hikari.connection-test-query=${HIKARI_TEST_QUERY:SELECT 1}
# Leak detection for production environments
spring.datasource.hikari.leak-detection-threshold=${HIKARI_LEAK_THRESHOLD:60000}
# Transaction isolation level
spring.datasource.hikari.transaction-isolation=${HIKARI_TRANSACTION_ISOLATION:TRANSACTION_READ_COMMITTED}
# Register MBeans for monitoring (useful in K8s with Prometheus)
spring.datasource.hikari.register-mbeans=${HIKARI_REGISTER_MBEANS:true}

# Security Configuration - OAuth2 Resource Server with AWS Cognito
# Feature flag to enable/disable security (allows safe rollback)
umc.security.enabled=${UMC_SECURITY_ENABLED:false}

# AWS Cognito Configuration
# These values should be provided via environment variables or Parameter Store in production
# NOTE: Cognito region (us-east-1) is independent from spring.cloud.aws.region.static
# The full URLs already include the correct region for Cognito
spring.security.oauth2.resourceserver.jwt.issuer-uri=${COGNITO_ISSUER_URI:${/umc-sp-contents/devops/cognito/issuer-uri:}}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${COGNITO_JWK_SET_URI:${/umc-sp-contents/devops/cognito/jwk-set-uri:}}

# JWT Configuration
spring.security.oauth2.resourceserver.jwt.audiences=${JWT_AUDIENCES:${/umc-sp-contents/devops/jwt/audiences:}}

# Security Development Mode - For local testing without real tokens
umc.security.development-mode=${UMC_SECURITY_DEV_MODE:false}
umc.security.development-token=${UMC_SECURITY_DEV_TOKEN:dev-token-123}

# CORS Configuration for DevOps
umc.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:${/umc-sp-contents/devops/cors/allowed-origins:*}}
umc.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
umc.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
umc.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}
umc.cors.max-age=${CORS_MAX_AGE:3600}
